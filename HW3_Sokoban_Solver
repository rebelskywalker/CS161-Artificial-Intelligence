;
; CS161 Hw3: Sokoban
; Chris Baker: 105180929 
; *********************
;    READ THIS FIRST
; ********************* 
;
; All functions that you need to modify are marked with 'EXERCISE' in their header comments.
; Do not modify a-star.lsp.
; This file also contains many helper functions. You may call any of them in your functions.
;
; *Warning*: The provided A* code only supports the maximum cost of 4999 for any node.
; That is f(n)=g(n)+h(n) < 5000. So, be careful when you write your heuristic functions.
; Do not make them return anything too large.
;
; For Allegro Common Lisp users: The free version of Allegro puts a limit on memory.
; So, it may crash on some hard sokoban problems and there is no easy fix (unless you buy 
; Allegro). 
; Of course, other versions of Lisp may also crash if the problem is too hard, but the amount
; of memory available will be relatively more relaxed.
; Improving the quality of the heuristic will mitigate this problem, as it will allow A* to
; solve hard problems with fewer node expansions.
; 
; In either case, this limitation should not significantly affect your grade.
; 
; Remember that most functions are not graded on efficiency (only correctness).
; Efficiency can only influence your heuristic performance in the competition (which will
; affect your score).
;  
;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; General utility functions
; They are not necessary for this homework.
; Use/modify them for your own convenience.
;

;
; For reloading modified code.
; I found this easier than typing (load "filename") every time. 
;
(defun reload()
  (load "hw3.lsp")
  )

;
; For loading a-star.lsp.
;
(defun load-a-star()
  (load "a-star.lsp"))

;
; Reloads hw3.lsp and a-star.lsp
;
(defun reload-all()
  (reload)
  (load-a-star)
  )

;
; A shortcut function.
; goal-test and next-states stay the same throughout the assignment.
; So, you can just call (sokoban <init-state> #'<heuristic-name>).
; 
;
(defun sokoban (s h)
  (a* s #'goal-test #'next-states h)
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; end general utility functions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; We now begin actual Sokoban code
;

; Define some global variables
(setq blank 0)
(setq wall 1)
(setq box 2)
(setq keeper 3)
(setq star 4)
(setq boxstar 5)
(setq keeperstar 6)

; Some helper functions for checking the content of a square
(defun isBlank (v)
  (= v blank)
  )

(defun isWall (v)
  (= v wall)
  )

(defun isBox (v)
  (= v box)
  )

(defun isKeeper (v)
  (= v keeper)
  )

(defun isStar (v)
  (= v star)
  )

(defun isBoxStar (v)
  (= v boxstar)
  )

(defun isKeeperStar (v)
  (= v keeperstar)
  )

;
; Helper function of getKeeperPosition
;
(defun getKeeperColumn (r col)
  (cond ((null r) nil)
	(t (if (or (isKeeper (car r)) (isKeeperStar (car r)))
	       col
	     (getKeeperColumn (cdr r) (+ col 1))
	     );end if
	   );end t
	);end cond
  )

;
; getKeeperPosition (s firstRow)
; Returns a list indicating the position of the keeper (c r).
; 
; Assumes that the keeper is in row >= firstRow.
; The top row is the zeroth row.
; The first (right) column is the zeroth column.
;
(defun getKeeperPosition (s row)
  (cond ((null s) nil)
	(t (let ((x (getKeeperColumn (car s) 0)))
	     (if x
		 ;keeper is in this row
		 (list x row)
		 ;otherwise move on
		 (getKeeperPosition (cdr s) (+ row 1))
		 );end if
	       );end let
	 );end t
	);end cond
  );end defun

;
; cleanUpList (l)
; returns l with any NIL element removed.
; For example, if l is '(1 2 NIL 3 NIL), returns '(1 2 3).
;
(defun cleanUpList (L)
  (cond ((null L) nil)
	(t (let ((cur (car L))
		 (res (cleanUpList (cdr L)))
		 )
	     (if cur 
		 (cons cur res)
		  res
		 )
	     );end let
	   );end t
	);end cond
  );end 

;Checkrow (item row)
;I/O: elem,row / T,F
;Recursively checks the row for one of the elements, left to right
(defun check-row (element row)
  (cond
   ((null row) nil)
   ;If first element is the item being searched for, return true
    ((equal element (car row)) t)
    ;Else recursively check left to right, if no such element, return false
    (t (check-row element (cdr row)))
    )
  )



;***************************GOAL TEST*********************************
; EXERCISE: Modify this function to return true (t)
; if and only if s is a goal state of a Sokoban game.
; (no box is on a non-goal square)
;
; Currently, it always returns NIL. If A* is called with
; this function as the goal testing function, A* will never
; terminate until the whole search space is exhausted.
;
;(defun goal-test (s)
;nil
;);end defun
;

(defun goal-test (s)
  (cond ((null s) t)
	;Check if the row has a box as first element, T->nil
	((check-row box (car s)) nil)
	;Else recurse and check left to right
	(t (goal-test (cdr s)))
	);end cond
  );end defun



;is-zero
;Check if the element is zero
(defun is-zero (x)
  (if (equal 0 x)
      t
      )
  )

;To check the position limits within gameboard
;(defun check-pos (pos)
;  (or (< (second pos) 0)(< (first pos) 0)
;      ;endor)
;    );endfun


; within-board
;I/O: s, pos / t,f
; Checkes if the position is within the range of the game board 
(defun within-board (s pos)
  (or
   ;check if either pos is less then 0 -> invalid
   (< (second pos) 0)(< (first pos) 0)
   ;Check if the positions fall outside length of board
   (> (+ (second pos) 1) (length s))
   (> (+ (first pos) 1) (length (first s)))
   );endor
  );end defun

; return-item
;I/O: r,c / t,f
; Checks the row list and returns the element within that column.
(defun return-item (row column)
  ;Check if the row is null, if so return null
  (cond ((null row) nil)
	;else return the first element in the row for the zero column
	((is-zero column) (car row))
	;repeat to gather each item while decrementing columns
    (t (return-item (cdr row) (- column 1)))
    ); end cond
  );end defun




;***************************Square Ops*********************************
; return-square
; I/O: s,pos / t,f
; Returns the element within the state at the coord of column,row.
(defun return-square (s pos)
  (let* (
	 ;Set two variables to represent the column and row
	 ;This will reduce computation by setting them once, and using mult
	 (column (first pos))
         (row (second pos))
	 );end var in let
    (cond ((within-board s pos) wall)
	  ;Checking within board range fo state and postion to eb a wall
	  ;If row is zero we return the first element as item in that col.
	  ((is-zero row) (return-item(car s) column))
	  ;Recursive search to take backend of state and list col less 1 row
	  ;This is done to return the element in every square row by row, w/col
	  (t (return-square (cdr s) (list column (- row 1))))
      );end cond
    );end let
  ); end defun

; empty-square
; Returns T if and only if a square is a star or a blank.
(defun empty-square (square)
  (or
   ;Check if the square is a blank
   (isBlank square)
   ;Check if the square is a star
   (isStar square)
   ;Either being true would return true, both false returns nil
   );eend or
  );end defun

;(defun box-or-empty (current dest)
;    (or(isBox current)(isBoxStar current)) (empty-square dest))
;    );end defun




;**********************Updating Squares/Moving************************
; can-move
; Returns T if there is a box at current position, and dest position is free
(defun can-move (current dest)
  (and (or(isBox current)(isBoxStar current)) (empty-square dest)
   );end and
  );end defun


; prep-update
; Takes a list row and returns the same list with the element at
; column column replaced with v.
(defun prep-update (row column v)
  (cond ((null row) nil)
    ((= 0 column) (cons v (cdr row)))
    (t (cons (car row) (prep-update (cdr row) (- column 1) v)))
    )
  )


; update-square (s column row v)
; Returns the same state with the element in s at (column, row)
(defun update-square (s column row v)
  (cond ((null s) nil)
    ((= 0 row) (cons (prep-update (car s) column v) (cdr s)))
    (t (cons (car s) (update-square (cdr s) column (- row 1) v)))
    )
  )

;Performs sq-update to adjust element on square
;Also conducts a final pass throgh with cons to check the boundary,
;I will change this part to do a boundary check in the beginnning.
;and just update the square
;(defun sq-update (S r c v)
;	(cond ((null S) nil)
;	((> r 0) (cons (first S) (sq-update (rest S) (- r 1) c v)))
;	((> c 0) (let* ((x (sq-update (cons (rest (first S)) (rest S)) r (- c 1) v))) (cons (cons (first (first S)) (first x)) (rest x))))
;	(t (cons (cons v (rest (first S))) (rest S))))
;)


; move
; Does the current square have a star? Yes star, then the obj will
; leave the space and update the square to a star square.
; Does next square have star? Yes, then the updated square will contain 
; the element with a star (ex: keeper + star or box + star).

(defun move (s current dest ystar nstar)
  (let* (
	 ;Set two variables, one to hold prev and new
	 (prev (return-square s current))
         (new (return-square s dest))
	 );endlet
    (cond ((= ystar prev)
       (cond ((isStar new) (update-square (update-square s (first current) (second current) star) (first dest) (second dest) ystar))
         (t (update-square (update-square s (first current) (second current) star) (first dest) (second dest) nstar))
         );end inner cond
       );end = ystar prev
      (t (cond ((isStar new) (update-square (update-square s (first current) (second current) blank) (first dest) (second dest) ystar))
         (t (update-square (update-square s (first current) (second current) blank) (first dest) (second dest) nstar))
         );end 2nd inner cond
       );end true else statement
      );end outer cond
    );end let
  );end defun




;**********************Updating Keeper/Boxes*******************************
; update-keep
; Move the keeper from current square to destination square.
(defun update-keep (st current dest)
  (move st current dest keeperstar keeper)
  )

; update-box
; This function tries to move a box from current square to destination square.
(defun update-box (st current dest)
  (move st current dest boxstar box)
  )

; try-move
; Move the keeper in s. This function is meant to work as the hw assign
; suggested. Where we try to move in a dir, and update values in squares.
; dir is the movement direction. C is for L,R movement since it is column
; R is for U,D movement since it is the row
; No box, then move keeper, is box then move box first,followed by keeper
; Return NIL for invalid, else return state
(defun try-move (s dir)
  (let* (
         (pos (getKeeperPosition s 0))
         (next (list (+ (first dir) (first pos)) (+ (second dir) (second pos))))
         (nextsquare (return-square s next))
         (nextnext (list (+ (first dir) (first next)) (+ (second dir) (second next))))
         (nextnextsquare (return-square s nextnext))
         );end let

    (cond
      ((empty-square nextsquare) (update-keep s pos next))
      ((can-move nextsquare nextnextsquare) (update-keep (update-box s next nextnext) pos next))
      (t nil)
      )
    );end cond
  )




;****************************Next States********************************
; EXERCISE: Modify this function to return the list of 
; successor states of s.
;
; This is the top-level next-states (successor) function.
; Some skeleton code is provided below.
; You may delete them totally, depending on your approach.
; 
; If you want to use it, you will need to set 'result' to be 
; the set of states after moving the keeper in each of the 4 directions.
; A pseudo-code for this is:
; 
; ...
; (result (list (try-move s UP) (try-move s DOWN) (try-move s LEFT) (try-move s RIGHT)))
; ...
; 
; You will need to define the function try-move and decide how to represent UP,DOWN,LEFT,RIGHT.
; Any NIL result returned from try-move can be removed by cleanUpList.


; next-states (s)
; Takes a state as input and returns the list of all states that can be reached from the
; given state in one move.
(defun next-states (s)
  (cleanUpList
   (list
; (try-move s 'UP) (try-move s 'DOWN) (try-move s 'LEFT) (try-move s 'RIGHT)
;Error returned that the above is not a list
    (try-move s '(0 -1)) ; UP
    (try-move s '(-1 0)) ; LEFT
    (try-move s '(1 0))  ; RIGHT 
    (try-move s '(0 1))  ; DOWN
    )
   )
)

; (print "TESTING NEXT STATES")
; (setq s1 '((1 1 1 1 1)
; 	       (1 0 0 4 1)
; 	       (1 0 2 0 1)
; 	       (1 0 3 0 1)
; 	       (1 0 0 0 1)
; 	       (1 1 1 1 1)
; 		  )
; )

; (print (next-states s1))

; (setq s2 '((1 1 1 1 1)
; 	       (1 0 0 4 1)
; 	       (1 0 2 3 1)
; 	       (1 0 0 0 1)
; 	       (1 0 0 0 1)
; 	       (1 1 1 1 1)
; 		  )
; )

; (print (next-states s2))

; (setq s3 '((1 1 1 1 1)
; 	       (1 0 0 6 1)
; 	       (1 0 2 0 1)
; 	       (1 0 0 0 1)
; 	       (1 0 0 0 1)
; 	       (1 1 1 1 1)
; 		  )
; )

; (print (next-states s3))

; (setq s4 '((1 1 1 1 1)
; 	       (1 4 2 0 1)
; 	       (1 0 0 0 1)
; 	       (1 0 0 0 1)
; 	       (1 0 5 3 1)
; 	       (1 1 1 1 1)
; 		  )
; )

; (print (next-states s4))





;***************************Heuristics*********************************
; EXERCISE: Modify this function to compute the trivial 
; admissible heuristic.
;
; h0 (s)
; Returns the constant 0, so just put 0.
(defun h0 (s)
  ;Simple admissible heuristic that just returns 0
  0
  )

; EXERCISE: Modify this function to compute the 
; number of misplaced boxes in s.
;

; misplaced-boxes
; Returns number of boxes that are not on a square containing
; A star by searching a row list, and accumulating each
; misplaced box by incrementing everytime and recursing the 
; row checking positions left to right
(defun misplaced-boxes (row)
  (cond ((null row) 0)
	((isBox (car row)) (+ 1 (misplaced-boxes (cdr row))))
	(t (misplaced-boxes (cdr row)))
    )
  )

; h1
; Returns the number of boxes which are not on goal positions in the given state.
; ANSWER: This is heuristic admissible
; For every box not at the goal, then a movement is required >= 1. 
; It is possible to reach goal with N moves since N boxes need to be 
; moved and in the best case it could be one position away.
; Thus, the cost to reach the goal is never overestimated
;The estimate cost <= true cost.
(defun h1 (s)
  (if (equal null s)
      ;if state is nullreturn 0
      0
    ;Else add the number of boxes not on goal positions
    (+ (misplaced-boxes (car s)) (h1 (cdr s)))
    );end if
  );end fun
  

;dis
;Takes the distance and converts it to a pos number if negative,
;Else it returns original positive number
(defun dis (displacement)
  ;Checks if the displacement is greater then or equal to 0, if so returns
  (cond ((>= displacement 0) displacement)
	;Else it returns the opposite of the negative number, so positive
	(t (- 0 displacement))
	);end cond
  );end defun





;***************************Manhattan Displacement***************************
;manhattan
;This function takes the current square and destination square and calcs
;the manhattan distance between the two points a b by finding the displacement
; for the x coord and the y coord. This is done using the first curr and dest
; and the second curr and dest which represent the delta y + delta x for total
; displacement sum
(defun manhattan (current dest)
  (+
   ;Perform manhattan calc, the sum of delta x and delta y
   (dis (- (first current) (first dest))) (dis (- (second current) (second dest)));End absval
   );End Sum
  );End fun

;Used to find the boxes in columns
;(defun getBoxColumn (r col)
;  (cond ((null r) nil)
;	(t (if (isBox (car r))
;	       col
;	     (getBoxColumn (cdr r) (+ col 1))
;	     );end if
;	   );end t
;	);end cond
;  )

;manhattan-min
;This function searches for the minimum manhattan distance possible from
;different paths by comparing new manhattan dist values against a temp
; min manhattan dist value.
; If a new min is found, then that one is chosen as the new current min.
; Retrun the manhattan-min
(defun manhattan-min (current dests curr)
  (cond ((null dests) curr) ; check for null destinations
    (t (let* ((dist (manhattan current (car dests)))) ; set dist as manh dist
       (cond ((null curr) (manhattan-min current (cdr dests) dist)) ;find min
         (t (cond ((< dist curr) (manhattan-min current (cdr dests) dist))
		  (t (manhattan-min current (cdr dests) curr)));2nd inner cond
	    )
         );end first inner cond
       );end let
     );end t
    );end outermost cond
  );end defun

;Used to the the position of goal column to determine where stars are
;  (defun getGoalColumn (r col)
;  (cond ((null r) nil)
;	(t (if (isStar (car r))
;	       col
;	     (getGoalColumn (cdr r) (+ col 1))
;	     );end if
;	   );end t
;	);end cond
;  )


;mdsum
;THis function accumulates the values of the manhattan distances
;and finds the sum of path costs from current squares to the goal square
;for corresponding items.
(defun mdsum (currents dests)
  ;Short the calculations if they are null, return 0
  (cond ((or (null currents) (null dests)) 0)
	;Any other case return non null results with manhattan-min and mdsum 
	(t (+ (manhattan-min (car currents) dests nil) (mdsum (cdr currents) (cdr dests))))
	);end cond
  );end defun

;keeper-manhattan
;This function finds the manhattan distance for the warehouse keeper
;in the given state to the destination that they are trying to reach
;to better estimate our heuristic function for optimal paths
(defun keeper-manhattan (s keeper dests)
  (cond ((null dests) 0)
	(t (+ (manhattan keeper (car dests)) (keeper-manhattan s keeper (cdr dests))))
	);end cond
  ); end defun

;prep-items
;This is a helper function that returns the coordinates for 
;every item that exists in a given row
(defun prep-items (row r c item)
;  (let* (
;	 (new-items (prep-items (cdr row) r (+ 1 c) item))
					;	 )
  ;check the cond for a null row
  (cond ((null row) nil)
	;perform list combinations if the first element in row was the item
	((= item (car row)) (cons (list c r) (prep-items (cdr row) r (+ 1 c) item)))
	;Else we recursively call on back end to look for the item and coord
	(t (prep-items (cdr row) r (+ 1 c) item))
	);end cond
  ;) ; endlet
  );end defun

; get-items
;This function uses the coordinates of the items in a list to 
;return a list of coordinates for every item that exists in a given
; state s
(defun get-items (s r item)
  ;If null state, then return nil
  (cond ((null s) nil)
	;else append the found coordinates for all items
    (t (append (prep-items (car s) r 0 item) (get-items (cdr s) (+ r 1) item)))
    );end cond
  ); end defun





;************************Final Heuristic*********************************
; EXERCISE: Change the name of this function to h<UID> where
; <UID> is your actual student ID number. Then, modify this 
; function to compute an admissible heuristic value of s. 
; 
; This function will be entered in the competition.
; Objective: make A* solve problems as fast as possible.
; The Lisp 'time' function can be used to measure the 
; running time of a function call.
;

;The following heuristic uses the sum of minimum distances
;Using estimated costs for manhattan values from boxes with goals and 
;keeper to boxes. Through this we can get a decent approx for best path
(defun h105180929 (s)
  (let* (
	 ;Define boxes since we use this several times, reduce to one calc.
         (boxes (get-items s 0 box))
  	 );end var in let
    ;Detrmine the minimum distance by estimating shortest dist for boxes,stars
    ;Also the min dist for shortest dist of keeper from goals
    (+ (mdsum boxes (get-items s 0 star)) (keeper-manhattan s (getKeeperPosition s 0) boxes))
    );end let
  );end defun
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
 | Some predefined problems.
 | Each problem can be visualized by calling (printstate <problem>). For example, (printstate p1).
 | Problems are roughly ordered by their difficulties.
 | For most problems, we also privide 2 additional number per problem:
 |    1) # of nodes expanded by A* using our next-states and h0 heuristic.
 |    2) the depth of the optimal solution.
 | These numbers are located at the comments of the problems. For example, the first problem below 
 | was solved by 80 nodes expansion of A* and its optimal solution depth is 7.
 | 
 | Your implementation may not result in the same number of nodes expanded, but it should probably
 | give something in the same ballpark. As for the solution depth, any admissible heuristic must 
 | make A* return an optimal solution. So, the depths of the optimal solutions provided could be used
 | for checking whether your heuristic is admissible.
 |
 | Warning: some problems toward the end are quite hard and could be impossible to solve without a good heuristic!
 | 
 |#

;(80,7)
(setq p1 '((1 1 1 1 1 1)
	   (1 0 3 0 0 1)
	   (1 0 2 0 0 1)
	   (1 1 0 1 1 1)
	   (1 0 0 0 0 1)
	   (1 0 0 0 4 1)
	   (1 1 1 1 1 1)))

;(110,10)
(setq p2 '((1 1 1 1 1 1 1)
	   (1 0 0 0 0 0 1) 
	   (1 0 0 0 0 0 1) 
	   (1 0 0 2 1 4 1) 
	   (1 3 0 0 1 0 1)
	   (1 1 1 1 1 1 1)))

;(211,12)
(setq p3 '((1 1 1 1 1 1 1 1 1)
	   (1 0 0 0 1 0 0 0 1)
	   (1 0 0 0 2 0 3 4 1)
	   (1 0 0 0 1 0 0 0 1)
	   (1 0 0 0 1 0 0 0 1)
	   (1 1 1 1 1 1 1 1 1)))

;(300,13)
(setq p4 '((1 1 1 1 1 1 1)
	   (0 0 0 0 0 1 4)
	   (0 0 0 0 0 0 0)
	   (0 0 1 1 1 0 0)
	   (0 0 1 0 0 0 0)
	   (0 2 1 0 0 0 0)
	   (0 3 1 0 0 0 0)))

;(551,10)
(setq p5 '((1 1 1 1 1 1)
	   (1 1 0 0 1 1)
	   (1 0 0 0 0 1)
	   (1 4 2 2 4 1)
	   (1 0 0 0 0 1)
	   (1 1 3 1 1 1)
	   (1 1 1 1 1 1)))

;(722,12)
(setq p6 '((1 1 1 1 1 1 1 1)
	   (1 0 0 0 0 0 4 1)
	   (1 0 0 0 2 2 3 1)
	   (1 0 0 1 0 0 4 1)
	   (1 1 1 1 1 1 1 1)))

;(1738,50)
(setq p7 '((1 1 1 1 1 1 1 1 1 1)
	   (0 0 1 1 1 1 0 0 0 3)
	   (0 0 0 0 0 1 0 0 0 0)
	   (0 0 0 0 0 1 0 0 1 0)
	   (0 0 1 0 0 1 0 0 1 0)
	   (0 2 1 0 0 0 0 0 1 0)
	   (0 0 1 0 0 0 0 0 1 4)))

;(1763,22)
(setq p8 '((1 1 1 1 1 1)
	   (1 4 0 0 4 1)
	   (1 0 2 2 0 1)
	   (1 2 0 1 0 1)
	   (1 3 0 0 4 1)
	   (1 1 1 1 1 1)))

;(1806,41)
(setq p9 '((1 1 1 1 1 1 1 1 1) 
	   (1 1 1 0 0 1 1 1 1) 
	   (1 0 0 0 0 0 2 0 1) 
	   (1 0 1 0 0 1 2 0 1) 
	   (1 0 4 0 4 1 3 0 1) 
	   (1 1 1 1 1 1 1 1 1)))

;(10082,51)
(setq p10 '((1 1 1 1 1 0 0)
	    (1 0 0 0 1 1 0)
	    (1 3 2 0 0 1 1)
	    (1 1 0 2 0 0 1)
	    (0 1 1 0 2 0 1)
	    (0 0 1 1 0 0 1)
	    (0 0 0 1 1 4 1)
	    (0 0 0 0 1 4 1)
	    (0 0 0 0 1 4 1)
	    (0 0 0 0 1 1 1)))

;(16517,48)
(setq p11 '((1 1 1 1 1 1 1)
	    (1 4 0 0 0 4 1)
	    (1 0 2 2 1 0 1)
	    (1 0 2 0 1 3 1)
	    (1 1 2 0 1 0 1)
	    (1 4 0 0 4 0 1)
	    (1 1 1 1 1 1 1)))

;(22035,38)
(setq p12 '((0 0 0 0 1 1 1 1 1 0 0 0)
	    (1 1 1 1 1 0 0 0 1 1 1 1)
	    (1 0 0 0 2 0 0 0 0 0 0 1)
	    (1 3 0 0 0 0 0 0 0 0 0 1)
	    (1 0 0 0 2 1 1 1 0 0 0 1)
	    (1 0 0 0 0 1 0 1 4 0 4 1)
	    (1 1 1 1 1 1 0 1 1 1 1 1)))

;(26905,28)
(setq p13 '((1 1 1 1 1 1 1 1 1 1)
	    (1 4 0 0 0 0 0 2 0 1)
	    (1 0 2 0 0 0 0 0 4 1)
	    (1 0 3 0 0 0 0 0 2 1)
	    (1 0 0 0 0 0 0 0 0 1)
	    (1 0 0 0 0 0 0 0 4 1)
	    (1 1 1 1 1 1 1 1 1 1)))

;(41715,53)
(setq p14 '((0 0 1 0 0 0 0)
	    (0 2 1 4 0 0 0)
	    (0 2 0 4 0 0 0)	   
	    (3 2 1 1 1 0 0)
	    (0 0 1 4 0 0 0)))

;(48695,44)
(setq p15 '((1 1 1 1 1 1 1)
	    (1 0 0 0 0 0 1)
	    (1 0 0 2 2 0 1)
	    (1 0 2 0 2 3 1)
	    (1 4 4 1 1 1 1)
	    (1 4 4 1 0 0 0)
	    (1 1 1 1 0 0 0)
	    ))

;(91344,111)
(setq p16 '((1 1 1 1 1 0 0 0)
	    (1 0 0 0 1 0 0 0)
	    (1 2 1 0 1 1 1 1)
	    (1 4 0 0 0 0 0 1)
	    (1 0 0 5 0 5 0 1)
	    (1 0 5 0 1 0 1 1)
	    (1 1 1 0 3 0 1 0)
	    (0 0 1 1 1 1 1 0)))

;(3301278,76)
(setq p17 '((1 1 1 1 1 1 1 1 1 1)
	    (1 3 0 0 1 0 0 0 4 1)
	    (1 0 2 0 2 0 0 4 4 1)
	    (1 0 2 2 2 1 1 4 4 1)
	    (1 0 0 0 0 1 1 4 4 1)
	    (1 1 1 1 1 1 0 0 0 0)))

;(??,25)
(setq p18 '((0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0)
	    (0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0)
	    (1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1)
	    (0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0)
	    (0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0)
	    (0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0)
	    (0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0)
	    (0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0)
	    (1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1)
	    (0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0)
	    (0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0)
	    (0 0 0 0 1 0 0 0 0 0 4 1 0 0 0 0)
	    (0 0 0 0 1 0 2 0 0 0 0 1 0 0 0 0)	    
	    (0 0 0 0 1 0 2 0 0 0 4 1 0 0 0 0)
	    ))
;(??,21)
(setq p19 '((0 0 0 1 0 0 0 0 1 0 0 0)
	    (0 0 0 1 0 0 0 0 1 0 0 0)
	    (0 0 0 1 0 0 0 0 1 0 0 0)
	    (1 1 1 1 0 0 0 0 1 1 1 1)
	    (0 0 0 0 1 0 0 1 0 0 0 0)
	    (0 0 0 0 0 0 3 0 0 0 2 0)
	    (0 0 0 0 1 0 0 1 0 0 0 4)
	    (1 1 1 1 0 0 0 0 1 1 1 1)
	    (0 0 0 1 0 0 0 0 1 0 0 0)
	    (0 0 0 1 0 0 0 0 1 0 0 0)
	    (0 0 0 1 0 2 0 4 1 0 0 0)))

;(??,??)
(setq p20 '((0 0 0 1 1 1 1 0 0)
	    (1 1 1 1 0 0 1 1 0)
	    (1 0 0 0 2 0 0 1 0)
	    (1 0 0 5 5 5 0 1 0)
	    (1 0 0 4 0 4 0 1 1)
	    (1 1 0 5 0 5 0 0 1)
	    (0 1 1 5 5 5 0 0 1)
	    (0 0 1 0 2 0 1 1 1)
	    (0 0 1 0 3 0 1 0 0)
	    (0 0 1 1 1 1 1 0 0)))

;(??,??)
(setq p21 '((0 0 1 1 1 1 1 1 1 0)
	    (1 1 1 0 0 1 1 1 1 0)
	    (1 0 0 2 0 0 0 1 1 0)
	    (1 3 2 0 2 0 0 0 1 0)
	    (1 1 0 2 0 2 0 0 1 0)
	    (0 1 1 0 2 0 2 0 1 0)
	    (0 0 1 1 0 2 0 0 1 0)
	    (0 0 0 1 1 1 1 0 1 0)
	    (0 0 0 0 1 4 1 0 0 1)
	    (0 0 0 0 1 4 4 4 0 1)
	    (0 0 0 0 1 0 1 4 0 1)
	    (0 0 0 0 1 4 4 4 0 1)
	    (0 0 0 0 1 1 1 1 1 1)))

;(??,??)
(setq p22 '((0 0 0 0 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0)
	    (0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0)
	    (0 0 0 0 1 2 0 0 1 0 0 0 0 0 0 0 0 0 0)
	    (0 0 1 1 1 0 0 2 1 1 0 0 0 0 0 0 0 0 0)
	    (0 0 1 0 0 2 0 2 0 1 0 0 0 0 0 0 0 0 0)
	    (1 1 1 0 1 0 1 1 0 1 0 0 0 1 1 1 1 1 1)
	    (1 0 0 0 1 0 1 1 0 1 1 1 1 1 0 0 4 4 1)
	    (1 0 2 0 0 2 0 0 0 0 0 0 0 0 0 0 4 4 1)
	    (1 1 1 1 1 0 1 1 1 0 1 3 1 1 0 0 4 4 1)
	    (0 0 0 0 1 0 0 0 0 0 1 1 1 1 1 1 1 1 1)
	    (0 0 0 0 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
 | Utility functions for printing states and moves.
 | You do not need to understand any of the functions below this point.
 |#

;
; Helper function of prettyMoves
; from s1 --> s2
;
(defun detectDiff (s1 s2)
  (let* ((k1 (getKeeperPosition s1 0))
	 (k2 (getKeeperPosition s2 0))
	 (deltaX (- (car k2) (car k1)))
	 (deltaY (- (cadr k2) (cadr k1)))
	 )
    (cond ((= deltaX 0) (if (> deltaY 0) 'DOWN 'UP))
	  (t (if (> deltaX 0) 'RIGHT 'LEFT))
	  );end cond
    );end let
  );end defun

;
; Translates a list of states into a list of moves.
; Usage: (prettyMoves (a* <problem> #'goal-test #'next-states #'heuristic))
;
(defun prettyMoves (m)
  (cond ((null m) nil)
	((= 1 (length m)) (list 'END))
	(t (cons (detectDiff (car m) (cadr m)) (prettyMoves (cdr m))))
	);end cond
  );

;
; Print the content of the square to stdout.
;
(defun printSquare (s)
  (cond ((= s blank) (format t " "))
	((= s wall) (format t "#"))
	((= s box) (format t "$"))
	((= s keeper) (format t "@"))
	((= s star) (format t "."))
	((= s boxstar) (format t "*"))
	((= s keeperstar) (format t "+"))
	(t (format t "|"))
	);end cond
  )

;
; Print a row
;
(defun printRow (r)
  (dolist (cur r)
    (printSquare cur)    
    )
  );

;
; Print a state
;
(defun printState (s)
  (progn    
    (dolist (cur s)
      (printRow cur)
      (format t "~%")
      )
    );end progn
  )

;
; Print a list of states with delay.
;
(defun printStates (sl delay)
  (dolist (cur sl)
    (printState cur)
    (sleep delay)
    );end dolist
  );end defun
